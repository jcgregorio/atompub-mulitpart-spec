<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc5023 SYSTEM 'bibxml/reference.RFC.5023.xml'>
<!ENTITY rfc2387 SYSTEM 'bibxml/reference.RFC.2387.xml'>
<!ENTITY rfc2392 SYSTEM 'bibxml/reference.RFC.2392.xml'>

]>

<!--<?xml-stylesheet type='text/xsl' href='rfc2629.xslt'/ ?>-->

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="yes" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<?rfc tocdepth="3" ?>
<!--
1. Update the docName
2. Update the date
3. Update the Revision History.
-->

<rfc category="std" ipr="full3978" docName="draft-gregorio-atompub-multipart-04">
  <front>
    <title abbrev="AtomPub Multipart Media Creation">AtomPub Multipart Media Resource Creation</title>

    <author initials='J.C.' surname="Gregorio" fullname='Joe Gregorio' role="editor">
      <organization>Google</organization>
      <address>
	<email>joe@bitworking.org</email>
	<uri>http://bitworking.org/</uri>
      </address>
    </author>

    <date month="September" year="2008"/>
    <abstract>

      <t>
	This specification defines how an Atom Publishing Protocol
	collection may process multipart/related requests
	and also defines how a service announces that it accepts
	multipart/related entities.
      </t>

    </abstract>

    <note title="Editorial Note">
      <t>
	To provide feedback on this Internet-Draft, join the
	<eref
	  target="http://www.imc.org/atom-protocol/">Atom Protocol mailing
	list (http://www.imc.org/atom-protocol/)</eref>.
      </t>
    </note>
  </front>
  <middle>
    <section title="Introduction">

      <t>
	The Atom Publishing Protocol <xref target="RFC5023" /> defines Media 
	Collections and how to create
	a Media Resource by POSTing the media to the Media Collection. RFC 5023 
	does not define handling multipart/related <xref target="RFC2387" /> 
	representations nor does it 
	specify how the acceptance of such representations should be 
	advertised in the Service Document. This specification covers both the 
	processing and the Service Document aspects of handling multipart/related content.
      </t>

      <section title="Notational Conventions">

	<t>
	  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	  "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",
	  "MAY", and "OPTIONAL" in this document are to be
	  interpreted as described in <xref target="RFC2119"/>.
	</t>

      </section>

      <section title="Design Considerations">
	<t>
	  The primary objective of multipart/related POSTs is to 
	  reduce round-trips for creating Media Resources. 
	  There are three round trips in the typical Media Resource
	  creation scenario; POST of the media, GET of the Media Link Entry, and subsequent
	  PUT of the updated Media Link Entry. This specification reduces that 
	  to just a single round-trip by allowing the client to package up
	  the media and the associated Media Link Entry into a single
	  multipart/related representation which is POSTed to the 
	  Media Collection.
	</t>
	<t>
	  The design of the handling of multipart/related representations
	  is aimed at backward compatibility, that is for non-multipart/related
	  aware clients to fully function. A second aim is to retain and 
	  utilize the expressiveness of the current app:accept element
	  in the Service Document. The last aim is to ease the burden on clients
	  by allowing the multipart representation to be constructed in an order
	  that is convenient for the client.
	</t>

      </section>

      <section title="Applicability">
	<t>
	  The applicability of multipart/related representations
	  to AtomPub Collections is restricted to the creation of
	  new entries in Media collections. 
	  It does not specify the creation or use of a
	  resource that supports a GET to return the multipart/related representation
	  nor does it specify the creation or use of 
	  a resource that supports a PUT of a multipart/related 
	  representation.
	</t>

      </section>
    </section>

    <section title="Terminology">
      <t>
	The terms Collection, Media Resource, Media Link Entry, Foreign Markup,
	and Service Document are used as defined in <xref target="RFC5023"/>.
	The term Object Root is used as defined in <xref target="RFC2387"/>.
      </t>
    </section>

    <section title="Multipart Representations">
      <t>
	This section covers the constraints on a multipart/related 
	representation sent to a Media Collection. <xref target="servicedoc"/>
	covers how a client discovers that a Media Collection accepts
	multipart/related representations.
      </t>
      <t>
  There may be other specifications that define uses for
  multipart representations in the AtomPub context; this specification
  only describes one particular representation and how to use it in the
  media-resource creation process.
  Follow-on multipart/related specifications will have to define 
  a method by which a server can differentiate which 
  specification is in force, which is beyond the scope of this document.
      </t>
      <t>
	A multipart/related POST to a Media Collection MUST be a valid
	multipart/related representation as defined by <xref target="RFC2387" />
	and MUST contain two body parts. One, referred to as the Entry Part,
	MUST be an Atom Entry with a media type of 'application/atom+xml'
	or 'application/atom+xml;type=entry'. The other, referred to as the
	Media Part, MUST be of a media type acceptable to the collection.
	The object root MUST be the Entry Part. The Entry Part's
	atom:content element MUST have a 'src' attribute whose value is
	the URI of the related media in the Media Part. The 'src'
	attribute value MUST be a 'cid:' URI as defined by
	<xref target="RFC2392" />.
	The Content-Type: header of the POST request MUST specify
	"application/atom+xml;type=entry" or "application/atom+xml".
      </t>
    </section>
    <section title="Server Processing">
      <t>
	A successful POST of a multipart/related representation to a Media
	Collection causes several resource-creation processes to occur as
	described in <xref target="RFC5023"/>.
	The Media Part is used to create a Media Resource as if it had been
	posted as a request body to the collection as described in section
	9.6, and the Entry Part is used to create the corresponding Media
	Link Entry.  Assuming these two steps are successful, the server
	returns a 201 status code and a Location: header pointing to the
	newly created Media Link Entry. 
	The applicable rules from <xref target="RFC5023"/> MUST be followed,
	including Slug: header	processing.
      </t>
      <t>
	While a multipart/related request replaces three round trips in the 
	typical Media Resource creation scenario, AtomPub has no mechanism to report
	partial success.  Thus, the handling of a 
	multipart/related request by the server MUST be atomic; that is, 
	either succeed with a 201 Created status code, or return an error
	status code. 
      </t>
    </section>

    <section title="Service Document Extension" anchor="servicedoc">
      <t>

  	An AtomPub service announces that it will accept multipart/related POSTs
 	by an extension to the app:accept element. The "alternate" attribute's
 	value MUST be one or more tokens, space-separated if more than one.
 	The only token defined by 
  	this specification is "multipart-related". The presence of the 
 	"multipart-related" token in the 'alternate' attribute's value indicates
 	that the collection accepts multipart/related POSTs whose
 	Media Part has a content-type matching that specified in the
 	app:accept element. The following example indicates a
  	collection that allows the creation of resources with 
  	the Ogg Bitstream Format and will also accept them in multipart form.

	<figure><artwork type="example"><![CDATA[
<app:accept alternate="multipart-related">application/ogg</app:accept>]]></artwork></figure>
      </t>

      <t>
	The 'alternate' attribute is foreign markup and will be ignored
	by clients that do not understand multipart/related uploads.
	In addition it permits the full range of the app:accept element 
	to be used. The following indicates that the collection accepts
	any image media type and will also accept them in multipart
	form.

	<figure><artwork type="example"><![CDATA[
<app:accept alternate="multipart-related">image/*</app:accept>]]></artwork></figure>
      </t>

      <t>
	The 'alternate' attribute allows clients that are unaware 
	of multipart/related to continue to operate as normal since
	the alternate attribute is foreign markup.
	The alternative, which is to put a multipart/related media type
	in the app:accept element, loses flexibility since the 
	'type' parameter to the multipart/related media type accepts
	only media types and not media ranges.
      </t>

    </section>

    <section title="Examples">

      <t>
	Here is an example service document that 
	contains two media collections. The first collection
	accepts multipart/related POSTs for video media types only.
        It does not accept multipart/related POSTs for audio or 
        text. The second collection accepts multipart/related POSTs
	for image/gif and image/png media types.
      </t>


	<figure><artwork type="example"><![CDATA[
   <?xml version="1.0" encoding='utf-8'?>
   <service xmlns="http://www.w3.org/2007/app"
            xmlns:atom="http://www.w3.org/2005/Atom">
     <workspace>
       <atom:title>Media Collections</atom:title>
       <collection
           href="http://example.org/blog/main" >
         <atom:title>Mostly Media</atom:title>
         <accept alternate="multipart-related">video/*</accept>
         <accept alternate="" >text/*</accept>
         <accept              >audio/*</accept>
       </collection>
       <collection
           href="http://example.org/blog/pic" >
         <atom:title>Pictures Only</atom:title>
         <accept alternate="multipart-related">image/png</accept>
         <accept alternate="multipart-related">image/gif</accept>
       </collection>
     </workspace>
   </service>
]]></artwork></figure>

	<t>
	  Here is an example interaction of a client creating
	  a new Media Resource in the Pictures Only media collection
	  using a png image in a multipart/related representation.
	</t>

<figure><artwork type='message/http: msgtype="request"'><![CDATA[
POST /blog/pic HTTP/1.1
Host: example.org
Content-Length: nnnn
Content-Type: multipart/related; 
       boundary="===============1605871705==";
       type="application/atom+xml"
Slug: The Beach
MIME-Version: 1.0

Media Post
--===============1605871705==
Content-Type: application/atom+xml; charset="utf-8"
MIME-Version: 1.0

<?xml version="1.0"?>
<entry xmlns="http://www.w3.org/2005/Atom">
  <title>The Beach</title>
  <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
  <updated>2005-10-07T17:17:08Z</updated>
  <author><name>Daffy</name></author>
  <summary type="text">
      A nice sunset picture over the water.
  </summary>
  <content src="cid:99334422@example.com" 
           type="image/gif" />
</entry>
--===============1605871705==
Content-Type: image/gif
MIME-Version: 1.0
Content-ID: <99334422@example.com>

GIF89a...binary image data...
--===============1605871705==--
]]></artwork></figure>
 
       <t>
	 If the request was successful the response might look like:
       </t>


<figure><artwork type='message/http: msgtype="response"'><![CDATA[
HTTP/1.1 201 Created
Date: Fri, 7 Oct 2005 17:17:11 GMT
Content-Length: nnn
Content-Type: application/atom+xml;type=entry;charset="utf-8"
Location: http://example.org/media/edit/the_beach.atom

<?xml version="1.0"?>
<entry xmlns="http://www.w3.org/2005/Atom">
  <title>The Beach</title>
  <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
  <updated>2005-10-07T17:17:08Z</updated>
  <author><name>Daffy</name></author>
  <summary type="text">
      A nice sunset picture over the water.
  </summary>
  <content type="image/png"
      src="http://media.example.org/the_beach.png"/>
  <link rel="edit-media" type="image/png"
      href="http://media.example.org/edit/the_beach.png" />
  <link rel="edit"
      href="http://example.org/media/edit/the_beach.atom" />
</entry>
]]></artwork></figure>



      <t>
	The initial request does not have to have the Entry Part first to 
        indicate that it is the object root, it's location
        can be indicated by the 'start' attribute, as in this example.
      </t>


<figure><artwork type='message/http: msgtype="request"'><![CDATA[
POST /blog/pic HTTP/1.1
Host: example.org
Content-Length: nnnn
Content-Type: multipart/related; 
       boundary="===============1605871705==";
       type="application/atom+xml";
       start="<10101033@example.com>"
Slug: The Beach
MIME-Version: 1.0

Media Post
--===============1605871705==
Content-Type: image/gif
MIME-Version: 1.0
Content-ID: <99334422@example.com>

GIF89a...binary image data...
--===============1605871705==
Content-Type: application/atom+xml; charset="utf-8"
MIME-Version: 1.0
Content-ID: <10101033@example.com>

<?xml version="1.0"?>
<entry xmlns="http://www.w3.org/2005/Atom">
  <title>The Beach</title>
  <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
  <updated>2005-10-07T17:17:08Z</updated>
  <author><name>Daffy</name></author>
  <summary type="text">
      A nice sunset picture over the water.
  </summary>
  <content src="cid:99334422@example.com" 
           type="image/gif" />
</entry>
--===============1605871705==--
]]></artwork></figure>


    </section>


    <section title="Security Considerations">
      <t>
	The security considerations are the same as delineated in <xref target="RFC5023"/>.
      </t>
    </section>

    <section title="IANA Considerations" anchor="iana">
      <t>
	No IANA actions are required by this document.
      </t>
    </section>


  </middle>
  <back>


    <references title='Normative References'>
      &rfc2119;
      &rfc5023;
      &rfc2387;
      &rfc2392;
    </references>

  </back>
</rfc>
